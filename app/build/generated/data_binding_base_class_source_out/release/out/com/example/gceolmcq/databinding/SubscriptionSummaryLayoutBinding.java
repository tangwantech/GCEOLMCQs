// Generated by view binder compiler. Do not edit!
package com.example.gceolmcq.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gceolmcq.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SubscriptionSummaryLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView invoiceMomoNumberTv;

  @NonNull
  public final TextView invoicePackageNameTv;

  @NonNull
  public final TextView invoicePackagePriceTv;

  @NonNull
  public final TextView invoiceSubjectNameTv;

  private SubscriptionSummaryLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull TextView invoiceMomoNumberTv, @NonNull TextView invoicePackageNameTv,
      @NonNull TextView invoicePackagePriceTv, @NonNull TextView invoiceSubjectNameTv) {
    this.rootView = rootView;
    this.invoiceMomoNumberTv = invoiceMomoNumberTv;
    this.invoicePackageNameTv = invoicePackageNameTv;
    this.invoicePackagePriceTv = invoicePackagePriceTv;
    this.invoiceSubjectNameTv = invoiceSubjectNameTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SubscriptionSummaryLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SubscriptionSummaryLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.subscription_summary_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SubscriptionSummaryLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.invoiceMomoNumberTv;
      TextView invoiceMomoNumberTv = ViewBindings.findChildViewById(rootView, id);
      if (invoiceMomoNumberTv == null) {
        break missingId;
      }

      id = R.id.invoicePackageNameTv;
      TextView invoicePackageNameTv = ViewBindings.findChildViewById(rootView, id);
      if (invoicePackageNameTv == null) {
        break missingId;
      }

      id = R.id.invoicePackagePriceTv;
      TextView invoicePackagePriceTv = ViewBindings.findChildViewById(rootView, id);
      if (invoicePackagePriceTv == null) {
        break missingId;
      }

      id = R.id.invoiceSubjectNameTv;
      TextView invoiceSubjectNameTv = ViewBindings.findChildViewById(rootView, id);
      if (invoiceSubjectNameTv == null) {
        break missingId;
      }

      return new SubscriptionSummaryLayoutBinding((LinearLayout) rootView, invoiceMomoNumberTv,
          invoicePackageNameTv, invoicePackagePriceTv, invoiceSubjectNameTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
