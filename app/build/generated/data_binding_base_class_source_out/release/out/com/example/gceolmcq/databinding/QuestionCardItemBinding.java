// Generated by view binder compiler. Do not edit!
package com.example.gceolmcq.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gceolmcq.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class QuestionCardItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final CorrectAnswerBinding correctAnswerLayout;

  @NonNull
  public final ExplanationButtonLayoutBinding explanationBtnLayout;

  @NonNull
  public final FourAlternativesInCorrectionBinding fourAlternativeCorrectionLayout;

  @NonNull
  public final ImageCardBinding imageCardLayout;

  @NonNull
  public final NonSelectableOptionsBinding nonSelectableOptionsLayout;

  @NonNull
  public final CardView questionCard;

  @NonNull
  public final QuestionLayoutBinding questionLayout;

  @NonNull
  public final SelectableOptionsBinding selectableOptionsLayout;

  @NonNull
  public final TwoStatementsBinding twoStatementsLayout;

  @NonNull
  public final UserMarkedAnswerBinding userMarkedAnswerLayout;

  private QuestionCardItemBinding(@NonNull CardView rootView,
      @NonNull CorrectAnswerBinding correctAnswerLayout,
      @NonNull ExplanationButtonLayoutBinding explanationBtnLayout,
      @NonNull FourAlternativesInCorrectionBinding fourAlternativeCorrectionLayout,
      @NonNull ImageCardBinding imageCardLayout,
      @NonNull NonSelectableOptionsBinding nonSelectableOptionsLayout,
      @NonNull CardView questionCard, @NonNull QuestionLayoutBinding questionLayout,
      @NonNull SelectableOptionsBinding selectableOptionsLayout,
      @NonNull TwoStatementsBinding twoStatementsLayout,
      @NonNull UserMarkedAnswerBinding userMarkedAnswerLayout) {
    this.rootView = rootView;
    this.correctAnswerLayout = correctAnswerLayout;
    this.explanationBtnLayout = explanationBtnLayout;
    this.fourAlternativeCorrectionLayout = fourAlternativeCorrectionLayout;
    this.imageCardLayout = imageCardLayout;
    this.nonSelectableOptionsLayout = nonSelectableOptionsLayout;
    this.questionCard = questionCard;
    this.questionLayout = questionLayout;
    this.selectableOptionsLayout = selectableOptionsLayout;
    this.twoStatementsLayout = twoStatementsLayout;
    this.userMarkedAnswerLayout = userMarkedAnswerLayout;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static QuestionCardItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QuestionCardItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.question_card_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QuestionCardItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.correctAnswerLayout;
      View correctAnswerLayout = ViewBindings.findChildViewById(rootView, id);
      if (correctAnswerLayout == null) {
        break missingId;
      }
      CorrectAnswerBinding binding_correctAnswerLayout = CorrectAnswerBinding.bind(correctAnswerLayout);

      id = R.id.explanationBtnLayout;
      View explanationBtnLayout = ViewBindings.findChildViewById(rootView, id);
      if (explanationBtnLayout == null) {
        break missingId;
      }
      ExplanationButtonLayoutBinding binding_explanationBtnLayout = ExplanationButtonLayoutBinding.bind(explanationBtnLayout);

      id = R.id.fourAlternativeCorrectionLayout;
      View fourAlternativeCorrectionLayout = ViewBindings.findChildViewById(rootView, id);
      if (fourAlternativeCorrectionLayout == null) {
        break missingId;
      }
      FourAlternativesInCorrectionBinding binding_fourAlternativeCorrectionLayout = FourAlternativesInCorrectionBinding.bind(fourAlternativeCorrectionLayout);

      id = R.id.imageCardLayout;
      View imageCardLayout = ViewBindings.findChildViewById(rootView, id);
      if (imageCardLayout == null) {
        break missingId;
      }
      ImageCardBinding binding_imageCardLayout = ImageCardBinding.bind(imageCardLayout);

      id = R.id.nonSelectableOptionsLayout;
      View nonSelectableOptionsLayout = ViewBindings.findChildViewById(rootView, id);
      if (nonSelectableOptionsLayout == null) {
        break missingId;
      }
      NonSelectableOptionsBinding binding_nonSelectableOptionsLayout = NonSelectableOptionsBinding.bind(nonSelectableOptionsLayout);

      CardView questionCard = (CardView) rootView;

      id = R.id.questionLayout;
      View questionLayout = ViewBindings.findChildViewById(rootView, id);
      if (questionLayout == null) {
        break missingId;
      }
      QuestionLayoutBinding binding_questionLayout = QuestionLayoutBinding.bind(questionLayout);

      id = R.id.selectableOptionsLayout;
      View selectableOptionsLayout = ViewBindings.findChildViewById(rootView, id);
      if (selectableOptionsLayout == null) {
        break missingId;
      }
      SelectableOptionsBinding binding_selectableOptionsLayout = SelectableOptionsBinding.bind(selectableOptionsLayout);

      id = R.id.twoStatementsLayout;
      View twoStatementsLayout = ViewBindings.findChildViewById(rootView, id);
      if (twoStatementsLayout == null) {
        break missingId;
      }
      TwoStatementsBinding binding_twoStatementsLayout = TwoStatementsBinding.bind(twoStatementsLayout);

      id = R.id.userMarkedAnswerLayout;
      View userMarkedAnswerLayout = ViewBindings.findChildViewById(rootView, id);
      if (userMarkedAnswerLayout == null) {
        break missingId;
      }
      UserMarkedAnswerBinding binding_userMarkedAnswerLayout = UserMarkedAnswerBinding.bind(userMarkedAnswerLayout);

      return new QuestionCardItemBinding((CardView) rootView, binding_correctAnswerLayout,
          binding_explanationBtnLayout, binding_fourAlternativeCorrectionLayout,
          binding_imageCardLayout, binding_nonSelectableOptionsLayout, questionCard,
          binding_questionLayout, binding_selectableOptionsLayout, binding_twoStatementsLayout,
          binding_userMarkedAnswerLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
